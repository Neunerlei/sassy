/**
 * Created by Martin Neundorfer on 20.12.2018.
 * For LABOR.digital
 */
/**
 * This function is used to parse a gutter definition (the same as a margin css-list)
 * and handle defaults for TRUE or FALSE
 *
 * Valid definitions are:
 * - TRUE -> Default gutter
 * - FALSE -> No gutter
 * - 10px -> The gutter on all sides should be 10px in total
 * - 10px 5px -> The gutter at the top and bottom should be 10px left and right 5px
 * - 10px 5px 4px 3px -> The gutter at the top should be 10px, right 5px at the bottom 4px and left 3px
 *
 * Note that all gutters are devided by two as two elements share the gutter with each other
@function sassyParseGutter($gutter)
  $gt: 0px !default
  $gr: 0px !default
  $gb: 0px !default
  $gl: 0px !default
  @if type-of($gutter) == "list"
    @if length($gutter) == 2
      $gt: nth($gutter, 1) / 2
      $gr: nth($gutter, 2) / 2
      $gb: $gt
      $gl: $gr
    @else if length($gutter) == 4
      $gt: nth($gutter, 1) / 2
      $gr: nth($gutter, 2) / 2
      $gb: nth($gutter, 3) / 2
      $gl: nth($gutter, 4) / 2
  @else if $gutter == true
    $gt: $sgv / 2
    $gr: $sgh / 2
    $gb: $gt
    $gl: $gr
  @else if $gutter == false
  @else
    $gt: $gutter / 2
    $gr: $gt
    $gb: $gt
    $gl: $gt
  @return (gt: $gt, gr: $gr, gb: $gb, gl: $gt)

/**
 * This mixin is used to render the order property to move
 * flexbox children around
=gridItemOrder($order)
  -ms-flex-order: $order
  order: $order

/*
 * A silent class which serves as base for all containers
%sassyContainer
  position: relative
  margin: 0 auto
  // The order is always XS -> XXS -> SM... Because XXS has to overrule the priority of XS!
  // XS (Both are active without breakpoint, because xs is the bootstrap standard...)
  width: $sassyContainerWidthXs
  // XXS (XXS overrides XS because we think it is more important)
  +bpXxs
    width: $sassyContainerWidthXxs
  +bpSmAndBigger()
    width: $sassyContainerWidthSm
  +bpMdAndBigger()
    width: $sassyContainerWidthMd
  +bpLgAndBigger()
    width: $sassyContainerWidthLg
  +bpXl()
    width: $sassyContainerWidthXl

/**
 * A tiny helper to convert the target element into a responsive container
=container()
  @extend %sassyContainer

/**
 * A silent class which serves as base for all grids so we can avoid duplicated css output
%sassyGrid
  position: relative
  display: flex
  flex-direction: row
  flex-wrap: wrap
  width: 100%
  box-sizing: border-box

  // Handle children
  & > *
    position: relative
    box-sizing: content-box
    flex-grow: 0
    flex-shrink: 0

    // Auto order
    @if $sassyAutoOrder == true
      @for $i from 1 through $sassyAutoOrderLength
        &:nth-child(#{$i})
          +gridItemOrder($i * 10)

/**
 * Creates a grid wrapper which can contain multiple grid items.
 * By default the wrapper compoensates the vertical gutter for the first and
 * the last row of the grid.
 *
 * @param $options Can take additional options for this grid
 *                 - gutterCompensation: A valid gutter definition for sassyParseGutter() to change/disable
 *                                       the automatic compensation of this grid's first and last rows
 *                 - hideCompensation:   By default all containers are set to "overflow:hidden" if you
 *                                       set this to FALSE the overflow keeps there
=grid($options: ())
  @extend %sassyGrid
  // Prepare options
  $defaults: (gutterCompensation: true, hideCompensation: true)
  $options: map-merge($defaults, $options)

  // Handle gutter
  $g: sassyParseGutter(map-get($options, gutterCompensation))
  margin-top: -(map-get($g, gt))
  margin-bottom: -(map-get($g, gb))

  // Handle overflow
  @if map-get($options, hideCompensation) == true
    overflow: hidden

/**
 * Defines the element as a child of a sassy grid.
 *
 * @param $span The range this column should take up in its width.
 *              (Range: 1 - $sassyGridColumns / the value of options.of)
 * @param $options Can take additional options for this item
 *                - of:     Can be used to override the default $sassyGridColumns value for this item
 *                - order:  The numeric order of this item in the element list
 *                - gutter: A valid gutter definition for sassyParseGutter() to change/disable
 *                          the gutter of this child
=gridItem($span: $sassyGridColumns, $options: ())
  // Prepare options
  $defaults: (of: $sassyGridColumns, order: -1, gutter: true)
  $options: map-merge($defaults, $options)

  // Handle gutter
  $g: sassyParseGutter(map-get($options, gutter))
  flex-basis: calc(#{percentage($span / map-get($options, of))} - #{(map-get($g, gl) + map-get($g, gr))})
  padding: map-get($g, gt) map-get($g, gr) map-get($g, gb) map-get($g, gl)

  // Handle offset
  @if map-get($options, order) > 0
    +gridItemOrder(map-get($options, order))
